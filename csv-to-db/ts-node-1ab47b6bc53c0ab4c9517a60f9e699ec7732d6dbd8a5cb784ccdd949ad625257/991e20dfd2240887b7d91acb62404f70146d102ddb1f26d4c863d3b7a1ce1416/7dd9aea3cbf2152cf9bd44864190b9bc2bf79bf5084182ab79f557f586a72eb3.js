"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var fs = require("fs");
var csv = require("csv-parser");
var model_1 = require("./model");
var config_1 = require("./config");
/**
 * To run this file you need to run
 * 'npm install' and then run
 * 'ts-node main.ts' in your terminal
 */
var separator = ',';
function validate(data) {
    if (!data) {
        return false;
    }
    var errors = {};
    // name
    // @ts-ignore
    var validationObj = config_1.config.csv.find(function (obj) { return obj.name === 'name'; });
    errors.name = config_1.checkLength(validationObj.minLength, validationObj.maxLength)(data.name)
        && new RegExp(validationObj.regExp, 'g').test(data.name);
    // age
    // @ts-ignore
    validationObj = config_1.config.csv.find(function (obj) { return obj.name === 'age'; });
    errors.age = config_1.checkLength(validationObj.minLength, validationObj.maxLength)(data.age)
        && new RegExp(validationObj.regExp, 'g').test(data.age)
        && config_1.checkMinMax(validationObj.min, validationObj.max)(+data.age);
    // date
    // @ts-ignore
    validationObj = config_1.config.csv.find(function (obj) { return obj.name === 'date'; });
    var date = new model_1.RegistrationDate(data.date);
    errors.date = config_1.checkLength(validationObj.minLength, validationObj.maxLength)(date)
        && config_1.checkMinMax(validationObj.minYear, validationObj.maxYear)(date.year)
        && config_1.checkMinMax(validationObj.minMonth, validationObj.maxMonth)(date.month)
        && config_1.checkMinMax(validationObj.minDay, validationObj.maxDay)(date.day);
    // time
    // @ts-ignore
    validationObj = config_1.config.csv.find(function (obj) { return obj.name === 'time'; });
    var time = new model_1.RegistrationTime(data.time);
    errors.time = config_1.checkLength(validationObj.minLength, validationObj.maxLength)(time)
        && config_1.checkMinMax(validationObj.minHour, validationObj.maxHour)(time.hours)
        && config_1.checkMinMax(validationObj.minMinute, validationObj.maxMinute)(time.minutes);
    // email
    // @ts-ignore
    validationObj = config_1.config.csv.find(function (obj) { return obj.name === 'email'; });
    var email = new model_1.Email(data.email);
    errors.email = config_1.checkLength(validationObj.minLength, validationObj.maxLength)(email)
        && new RegExp(validationObj.regExpName, 'g').test(email.name)
        && new RegExp(validationObj.regExpDomain).test(email.domain);
    // phone
    // @ts-ignore
    validationObj = config_1.config.csv.find(function (obj) { return obj.name === 'phone'; });
    var phone = new model_1.Phone(data.phone);
    errors.phone = config_1.checkLength(validationObj.minLength, validationObj.maxLength)(phone);
    // return false is errors object has false in any property
    // console.log('-->', errors);
    return !Object.keys(errors).some(function (item) { return !errors[item]; });
}
exports.validate = validate;
var results = [];
var errors = [];
function saveToDB(results) {
    // save to db
}
function makeCsvFile(array) {
    if (array.length) {
        var writer_1 = fs.createWriteStream('assets/invalid.csv');
        writer_1.write(Object.keys(array[0]).join(separator) + '\n');
        array.forEach(function (item) {
            var arr = [];
            for (var key in item) {
                arr.push(item[key]);
            }
            writer_1.write(arr.join(separator) + '\n');
        });
        writer_1.close();
    }
}
fs.createReadStream('assets/Users.csv')
    .pipe(csv({ separator: separator }))
    .on('data', function (data) {
    (validate(data) ? results : errors).push(data);
})
    .on('end', function () {
    saveToDB(results);
    makeCsvFile(errors);
    console.log('res', results);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,